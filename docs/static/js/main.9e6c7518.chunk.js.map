{"version":3,"sources":["logo.svg","bindingModels/index.js","help.js","components/Snackbar/MySnackbarContentWrapper.js","components/Snackbar/index.js","components/Theme.js","App.js","serviceWorker.js","index.js","components/ReceiveCredential.js"],"names":["module","exports","DIDAuth","CertifiedMillTestReport","UniversityDegreeCredential","getVpFromIssuerApi","credentialType","credentialSubjectId","a","bindingModel","bindingModels","payload","issuer","credentialSubject","id","fetch","method","mode","cache","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","vc","vp","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","default","useStyles1","makeStyles","theme","backgroundColor","green","palette","dark","primary","main","amber","icon","fontSize","iconVariant","opacity","marginRight","spacing","message","display","alignItems","MySnackbarContentWrapper","props","classes","className","onClose","variant","other","Icon","SnackbarContent","clsx","aria-describedby","action","IconButton","key","aria-label","color","onClick","TSnackbar","tmui","snackBarMessage","vertical","horizontal","open","autoHideDuration","handleClose","event","reason","doSetTmuiProp","Snackbar","anchorOrigin","font1","font2","font3","Theme","children","this","createMuiTheme","splashImage","type","light","lighten","darken","secondary","typography","useNextVariants","fontFamily","join","h1","fontWeight","h2","h3","h4","textTransform","letterSpacing","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","overrides","MuiInput","input","MuiInputLabel","root","MuiAppBar","MuiButton","contained","boxShadow","Component","App","React","useEffect","chapi","console","bannerColor","href","style","maxWidth","margin","paddingTop","src","logo","alt","width","padding","ReceiveCredential","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","options","value","label","useState","state","setState","prop","marginBottom","select","fullWidth","onChange","target","map","option","required","marginTop","webCredentialWrapper","global","WebCredential","credentials","store","result","log"],"mappings":"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","file":"static/js/main.9e6c7518.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.33b194d8.svg\";","import CertifiedMillTestReport from './CertifiedMillTestReport.json'\nimport UniversityDegreeCredential from './UniversityDegreeCredential.json'\nimport DIDAuth from './DIDAuth.json'\n\nexport default { DIDAuth, CertifiedMillTestReport, UniversityDegreeCredential }","\nimport bindingModels from './bindingModels'\n\nexport const getVpFromIssuerApi = async (credentialType, credentialSubjectId) => {\n  const issuerEndpoint = 'https://vc.transmute.world/vc-data-model/credentials';\n  let bindingModel = bindingModels[credentialType]\n\n  const payload = {\n    ...bindingModel,\n    issuer: \"did:web:vc.transmute.world\",\n    credentialSubject: {\n      ...bindingModel.credentialSubject,\n      id: credentialSubjectId\n    }\n  }\n\n  const response = await fetch(issuerEndpoint, {\n    method: 'POST',\n    mode: 'cors',\n    cache: 'no-cache',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    redirect: 'follow',\n    referrerPolicy: 'no-referrer',\n    body: JSON.stringify(payload)\n  });\n  let vc = await response.json();\n  const vp = {\n    \"@context\": [\n      \"https://www.w3.org/2018/credentials/v1\",\n      \"https://www.w3.org/2018/credentials/examples/v1\"\n    ],\n    \"type\": \"VerifiablePresentation\",\n    \"verifiableCredential\": [vc]\n  };\n  return vp;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n    default: InfoIcon,\n};\n\nconst useStyles1 = makeStyles(theme => ({\n    success: {\n        backgroundColor: green[600],\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    info: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    warning: {\n        backgroundColor: amber[700],\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\nfunction MySnackbarContentWrapper(props) {\n    const classes = useStyles1();\n    const { className, message, onClose, variant, ...other } = props;\n    // eslint-disable-next-line\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            // eslint-disable-next-line\n            className={clsx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\n                    {message}\n                </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    onClick={onClose}\n                >\n                    <CloseIcon className={classes.icon} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}\n\nMySnackbarContentWrapper.propTypes = {\n    className: PropTypes.string,\n    message: PropTypes.string,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning', 'default'])\n        .isRequired,\n};\n\nexport { MySnackbarContentWrapper };\nexport default MySnackbarContentWrapper;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport MySnackbarContentWrapper from './MySnackbarContentWrapper';\n\nfunction TSnackbar(props) {\n    const {\n        open,\n        variant,\n        message,\n        autoHideDuration,\n        vertical,\n        horizontal,\n    } = props.tmui.snackBarMessage || {\n        variant: 'default',\n        vertical: 'bottom',\n        horizontal: 'right',\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        props.doSetTmuiProp({\n            snackBarMessage: {\n                ...props.tmui.snackBarMessage,\n                open: false,\n            },\n        });\n    };\n\n    return (\n        <div>\n            <Snackbar\n                anchorOrigin={{\n                    vertical,\n                    horizontal,\n                }}\n                open={open}\n                autoHideDuration={autoHideDuration}\n                onClose={handleClose}\n            >\n                <MySnackbarContentWrapper\n                    onClose={handleClose}\n                    variant={variant}\n                    message={message}\n                />\n            </Snackbar>\n        </div>\n    );\n}\n\nTSnackbar.propTypes = {\n    tmui: PropTypes.object.isRequired,\n    doSetTmuiProp: PropTypes.func.isRequired,\n};\n\nexport { TSnackbar as Snackbar };\nexport default TSnackbar;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nimport { darken, lighten } from '@material-ui/core/styles/colorManipulator';\n\nconst primaryColor = '#594aa8';\nconst secondaryColor = '#fcb373';\n\nconst font1 = '\"Rajdhani\"';\nconst font2 = '\"Roboto Condensed\"';\nconst font3 = '\"Lato\"';\n\nconst fontWeightLight = 300;\nconst fontWeightRegular = 400;\nconst fontWeightMedium = 600;\n\nclass Theme extends Component {\n    render() {\n        const { children } = this.props;\n        const theme = createMuiTheme({\n            splashImage: '',\n            palette: {\n                type: 'light',\n                primary: {\n                    light: lighten(primaryColor, 0.07),\n                    main: primaryColor,\n                    dark: darken(primaryColor, 0.07),\n                },\n                secondary: {\n                    light: lighten(secondaryColor, 0.07),\n                    main: secondaryColor,\n                    dark: darken(secondaryColor, 0.07),\n                },\n            },\n            typography: {\n                useNextVariants: true,\n                fontSize: 16,\n                fontFamily: [font1, font2, font3].join(','),\n                h1: {\n                    fontFamily: font1,\n                    fontWeight: fontWeightMedium,\n                },\n                h2: {\n                    fontFamily: font1,\n                    fontWeight: fontWeightMedium,\n                },\n                h3: {\n                    fontFamily: font1,\n                    fontWeight: fontWeightMedium,\n                },\n                h4: {\n                    fontFamily: font2,\n                    textTransform: 'uppercase',\n                    letterSpacing: '0.1em',\n                    fontWeight: fontWeightRegular,\n                },\n                h5: {\n                    fontFamily: font2,\n                    textTransform: 'uppercase',\n                    letterSpacing: '0.1em',\n                    fontWeight: fontWeightRegular,\n                },\n                h6: {\n                    fontFamily: font2,\n                    textTransform: 'uppercase',\n                    letterSpacing: '0.1em',\n                    fontWeight: fontWeightRegular,\n                },\n                subtitle1: {\n                    fontFamily: font1,\n                    fontWeight: fontWeightRegular,\n                },\n                subtitle2: {\n                    fontFamily: font2,\n                    fontWeight: fontWeightRegular,\n                },\n                body1: {\n                    fontFamily: font3,\n                    fontWeight: fontWeightRegular,\n                },\n                body2: {\n                    fontFamily: font3,\n                    fontWeight: fontWeightRegular,\n                },\n                button: {\n                    fontFamily: font2,\n                    fontWeight: fontWeightRegular,\n                },\n                caption: {\n                    fontFamily: font2,\n                    fontWeight: fontWeightRegular,\n                },\n                overline: {\n                    fontFamily: font2,\n                    letterSpacing: '0.15em',\n                    textTransform: 'uppercase',\n                    fontWeight: fontWeightLight,\n                },\n            },\n\n            overrides: {\n                MuiInput: {\n                    // Name of the component ⚛️ / style sheet\n                    input: {\n                        fontFamily: font3,\n                    },\n                },\n                MuiInputLabel: {\n                    // Name of the component ⚛️ / style sheet\n                    root: {\n                        fontFamily: font2,\n                    },\n                },\n                MuiAppBar: {\n                    root: {\n                        // boxShadow: 'none',\n                    },\n                },\n                MuiButton: {\n                    // Name of the rule\n                    contained: {\n                        boxShadow: 'none',\n                    },\n                },\n            },\n        });\n        return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>;\n    }\n}\n\nTheme.propTypes = {\n    children: PropTypes.any.isRequired,\n};\n\nexport default Theme;","import React from 'react';\nimport * as chapi from 'credential-handler-polyfill';\nimport GithubCorner from 'react-github-corner';\n\nimport Theme from './components/Theme'\nimport './App.css';\n\nimport ReceiveCredential from './components/ReceiveCredential'\n\nimport logo from './logo.svg';\n\nfunction App() {\n  React.useEffect(() => {\n    (async () => {\n      try {\n        await chapi.loadOnce();\n      } catch (e) {\n        console.error('Error in loadOnce:', e);\n      }\n    })();\n  })\n  return (\n    <Theme>\n      <div className=\"App\">\n        <GithubCorner bannerColor={'#594aa8'} href=\"https://github.com/transmute-industries/issuer.interop.transmute.world\" />\n        <div style={{ maxWidth: '512px', margin: 'auto', paddingTop: '10%', }}>\n          <img src={logo} alt=\"transmute logo\" style={{ width: '50%', margin: 'auto', display: 'block', padding: '32px 0px' }} />\n          <ReceiveCredential />\n        </div>\n      </div>\n    </Theme>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button/Button'\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport Paper from '@material-ui/core/Paper';\n\nimport TextField from '@material-ui/core/TextField/TextField'\n\nimport { getVpFromIssuerApi } from '../help';\n\nimport Snackbar from './Snackbar';\n\n\nconst options = [\n  {\n    value: 'CertifiedMillTestReport',\n    label: 'Certified Mill Test Report',\n  },\n  {\n    value: 'UniversityDegreeCredential',\n    label: 'University Degree Credential',\n  },\n  {\n    value: 'DIDAuth',\n    label: 'DID Authentication',\n  },\n];\n\nfunction ReceiveCredential() {\n\n  const [state, setState] = React.useState({\n    credentialSubjectId: 'did:example:credential-subject-123',\n    credentialType: 'CertifiedMillTestReport',\n    tmui: {}\n  });\n\n  const handleChange = event => {\n    setState({ ...state, credentialType: event.target.value });\n  };\n\n  return (\n    <Paper style={{ padding: '32px' }}>\n      <Snackbar tmui={state.tmui} doSetTmuiProp={(prop) => {\n        setState({\n          ...state,\n          tmui: {\n            ...state.tmui,\n            ...prop\n          }\n        })\n      }} />\n      <Typography variant=\"h6\" style={{ marginBottom: '32px' }}>Receive a Verifiable Credential</Typography>\n\n      <TextField\n        id=\"outlined-select-credentialType\"\n        style={{ marginBottom: '16px' }}\n        select\n        fullWidth\n        label=\"Credential Type\"\n        value={state.credentialType}\n        onChange={handleChange}\n        variant=\"outlined\"\n      >\n        {options.map(option => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </TextField>\n      <TextField\n        required\n        fullWidth\n        id=\"credentialSubjectId\"\n        label=\"Credential Subject ID\"\n        variant=\"outlined\"\n        value={state.credentialSubjectId}\n      />\n      <div style={{ marginTop: '16px', marginBottom: '16px', }}>\n        <Button variant={'contained'} onClick={async () => {\n          const vp = await getVpFromIssuerApi(state.credentialType, state.credentialSubjectId)\n          const webCredentialWrapper = new global.WebCredential(vp.type, vp);\n          // Use Credential Handler API to store\n          const result = await navigator.credentials.store(webCredentialWrapper);\n          console.log('Result of receiving via store() request:', result);\n          setState({\n            ...state,\n            tmui: {\n              ...state.tmui,\n              snackBarMessage: {\n                open: true,\n                variant: 'success',\n                message: 'Credential stored in wallet.',\n                vertical: 'top',\n                horizontal: 'right',\n                autoHideDuration: 20 * 1000,\n              },\n            }\n          }\n          );\n        }}>Receive Credential</Button>\n      </div>\n\n\n    </Paper >\n  );\n}\n\nexport default ReceiveCredential;\n"],"sourceRoot":""}